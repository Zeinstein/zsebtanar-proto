import { langUtils } from './langUtils'
import { plNumber } from 'pocket-lisp/dist/stdlib.js'
import { plFractionNumber } from 'pocket-lisp/bin/src/stdlib'

describe('lang utils', () => {
  test('suffix-times', () => {
    const fn = langUtils['suffix-times']
    expect(fn(plNumber(-5))).toEqual('ször')
    expect(fn(plNumber(-1))).toEqual('szer')
    expect(fn(plNumber(0))).toEqual('szor')
    expect(fn(plNumber(1))).toEqual('szer')
    expect(fn(plNumber(2))).toEqual('szer')
    expect(fn(plNumber(3))).toEqual('szor')
    expect(fn(plNumber(4))).toEqual('szer')
    expect(fn(plNumber(5))).toEqual('ször')
    expect(fn(plNumber(6))).toEqual('szor')
    expect(fn(plNumber(7))).toEqual('szer')
    expect(fn(plNumber(8))).toEqual('szor')
    expect(fn(plNumber(9))).toEqual('szer')
    expect(fn(plNumber(10))).toEqual('szer')
    expect(fn(plNumber(15))).toEqual('ször')
    expect(fn(plNumber(20))).toEqual('szor')
    expect(fn(plNumber(30))).toEqual('szor')
    expect(fn(plNumber(40))).toEqual('szer')
    expect(fn(plNumber(50))).toEqual('szer')
    expect(fn(plNumber(60))).toEqual('szor')
    expect(fn(plNumber(70))).toEqual('szer')
    expect(fn(plNumber(80))).toEqual('szor')
    expect(fn(plNumber(90))).toEqual('szer')
    expect(fn(plNumber(100))).toEqual('szor')
    expect(fn(plNumber(1000))).toEqual('szer')

    expect(fn(plNumber(1234))).toEqual('szer')
  })

  test('lang-hu-times2', () => {
    const fn = langUtils['suffix-times2']
    expect(fn(plNumber(-5))).toEqual('szörösére')
    expect(fn(plNumber(-1))).toEqual('szeresére')
    expect(fn(plNumber(0))).toEqual('szorosára')
    expect(fn(plNumber(1))).toEqual('szeresére')
    expect(fn(plNumber(2))).toEqual('szeresére')
    expect(fn(plNumber(3))).toEqual('szorosára')
    expect(fn(plNumber(4))).toEqual('szeresére')
    expect(fn(plNumber(5))).toEqual('szörösére')
    expect(fn(plNumber(6))).toEqual('szorosára')
    expect(fn(plNumber(7))).toEqual('szeresére')
    expect(fn(plNumber(8))).toEqual('szorosára')
    expect(fn(plNumber(9))).toEqual('szeresére')
    expect(fn(plNumber(10))).toEqual('szeresére')
    expect(fn(plNumber(15))).toEqual('szörösére')
    expect(fn(plNumber(20))).toEqual('szorosára')
    expect(fn(plNumber(30))).toEqual('szorosára')
    expect(fn(plNumber(40))).toEqual('szeresére')
    expect(fn(plNumber(50))).toEqual('szeresére')
    expect(fn(plNumber(60))).toEqual('szorosára')
    expect(fn(plNumber(70))).toEqual('szeresére')
    expect(fn(plNumber(80))).toEqual('szorosára')
    expect(fn(plNumber(90))).toEqual('szeresére')
    expect(fn(plNumber(100))).toEqual('szorosára')
    expect(fn(plNumber(1000))).toEqual('szeresére')

    expect(fn(plNumber(1234))).toEqual('szeresére')
  })

  test('suffix-fraction', () => {
    const fn = langUtils['suffix-fraction']
    expect(fn(plFractionNumber(1, -5))).toEqual('od')
    expect(fn(plFractionNumber(1, -1))).toEqual('ed')
    expect(fn(plFractionNumber(1, 0))).toEqual('ed')
    expect(fn(plFractionNumber(1, 1))).toEqual('ed')
    expect(fn(plFractionNumber(1, 2))).toEqual('ed')
    expect(fn(plFractionNumber(1, 3))).toEqual('ed')
    expect(fn(plFractionNumber(1, 4))).toEqual('ed')
    expect(fn(plFractionNumber(1, 5))).toEqual('od')
    expect(fn(plFractionNumber(1, 6))).toEqual('ed')
    expect(fn(plFractionNumber(1, 7))).toEqual('ed')
    expect(fn(plFractionNumber(1, 8))).toEqual('ed')
    expect(fn(plFractionNumber(1, 9))).toEqual('ed')
    expect(fn(plFractionNumber(1, 10))).toEqual('ed')
    expect(fn(plFractionNumber(1, 15))).toEqual('od')
    expect(fn(plFractionNumber(1, 20))).toEqual('ed')
    expect(fn(plFractionNumber(1, 30))).toEqual('ed')
    expect(fn(plFractionNumber(1, 40))).toEqual('ed')
    expect(fn(plFractionNumber(1, 50))).toEqual('ed')
    expect(fn(plFractionNumber(1, 60))).toEqual('ed')
    expect(fn(plFractionNumber(1, 70))).toEqual('ed')
    expect(fn(plFractionNumber(1, 80))).toEqual('ed')
    expect(fn(plFractionNumber(1, 90))).toEqual('ed')
    expect(fn(plFractionNumber(1, 100))).toEqual('ed')
    expect(fn(plFractionNumber(1, 1000))).toEqual('ed')

    expect(fn(plFractionNumber(1, 1234))).toEqual('ed')
  })
})
