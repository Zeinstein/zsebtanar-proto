import { langUtils } from './langUtils'
import { plFractionNumber } from 'pocket-lisp-stdlib'

describe('lang utils', () => {
  test('suffix-times', () => {
    const fn = langUtils['suffix-times']
    expect(fn(-5)).toEqual('ször')
    expect(fn(-1)).toEqual('szer')
    expect(fn(0)).toEqual('szor')
    expect(fn(1)).toEqual('szer')
    expect(fn(2)).toEqual('szer')
    expect(fn(3)).toEqual('szor')
    expect(fn(4)).toEqual('szer')
    expect(fn(5)).toEqual('ször')
    expect(fn(6)).toEqual('szor')
    expect(fn(7)).toEqual('szer')
    expect(fn(8)).toEqual('szor')
    expect(fn(9)).toEqual('szer')
    expect(fn(10)).toEqual('szer')
    expect(fn(15)).toEqual('ször')
    expect(fn(20)).toEqual('szor')
    expect(fn(30)).toEqual('szor')
    expect(fn(40)).toEqual('szer')
    expect(fn(50)).toEqual('szer')
    expect(fn(60)).toEqual('szor')
    expect(fn(70)).toEqual('szer')
    expect(fn(80)).toEqual('szor')
    expect(fn(90)).toEqual('szer')
    expect(fn(100)).toEqual('szor')
    expect(fn(1000)).toEqual('szer')

    expect(fn(1234)).toEqual('szer')
  })

  test('lang-hu-times2', () => {
    const fn = langUtils['suffix-times2']
    expect(fn(-5)).toEqual('szörösére')
    expect(fn(-1)).toEqual('szeresére')
    expect(fn(0)).toEqual('szorosára')
    expect(fn(1)).toEqual('szeresére')
    expect(fn(2)).toEqual('szeresére')
    expect(fn(3)).toEqual('szorosára')
    expect(fn(4)).toEqual('szeresére')
    expect(fn(5)).toEqual('szörösére')
    expect(fn(6)).toEqual('szorosára')
    expect(fn(7)).toEqual('szeresére')
    expect(fn(8)).toEqual('szorosára')
    expect(fn(9)).toEqual('szeresére')
    expect(fn(10)).toEqual('szeresére')
    expect(fn(15)).toEqual('szörösére')
    expect(fn(20)).toEqual('szorosára')
    expect(fn(30)).toEqual('szorosára')
    expect(fn(40)).toEqual('szeresére')
    expect(fn(50)).toEqual('szeresére')
    expect(fn(60)).toEqual('szorosára')
    expect(fn(70)).toEqual('szeresére')
    expect(fn(80)).toEqual('szorosára')
    expect(fn(90)).toEqual('szeresére')
    expect(fn(100)).toEqual('szorosára')
    expect(fn(1000)).toEqual('szeresére')

    expect(fn(1234)).toEqual('szeresére')
  })

  test('suffix-fraction', () => {
    const fn = langUtils['suffix-fraction']
    expect(fn(plFractionNumber(1, -5))).toEqual('öd')
    expect(fn(plFractionNumber(1, -1))).toEqual('ed')

    expect(fn(plFractionNumber(1, 1))).toEqual('ed')
    expect(fn(plFractionNumber(1, 2))).toEqual('ed')
    expect(fn(plFractionNumber(1, 3))).toEqual('ad')
    expect(fn(plFractionNumber(1, 4))).toEqual('ed')
    expect(fn(plFractionNumber(1, 5))).toEqual('öd')
    expect(fn(plFractionNumber(1, 6))).toEqual('od')
    expect(fn(plFractionNumber(1, 7))).toEqual('ed')
    expect(fn(plFractionNumber(1, 8))).toEqual('ad')
    expect(fn(plFractionNumber(1, 9))).toEqual('ed')
    expect(fn(plFractionNumber(1, 10))).toEqual('ed')
    expect(fn(plFractionNumber(1, 15))).toEqual('öd')
    expect(fn(plFractionNumber(1, 20))).toEqual('ad')
    expect(fn(plFractionNumber(1, 30))).toEqual('ad')
    expect(fn(plFractionNumber(1, 40))).toEqual('ed')
    expect(fn(plFractionNumber(1, 50))).toEqual('ed')
    expect(fn(plFractionNumber(1, 60))).toEqual('ad')
    expect(fn(plFractionNumber(1, 70))).toEqual('ed')
    expect(fn(plFractionNumber(1, 80))).toEqual('ad')
    expect(fn(plFractionNumber(1, 90))).toEqual('ed')
    expect(fn(plFractionNumber(1, 100))).toEqual('ad')
    expect(fn(plFractionNumber(1, 1000))).toEqual('ed')

    expect(fn(plFractionNumber(1, 1234))).toEqual('ed')
  })
})
